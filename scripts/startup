#!/usr/bin/env python3
import json
import logging
import os
import re
import subprocess
import sys
import base64

STARTUP_PATH = sys.argv[1]

logging.basicConfig(
    level=logging.INFO,
    stream=sys.stdout,
    format='%(levelname)s: %(message)s',
)
def update_vcap_services(database_endpoint):
    logging.debug("Executing update_vcap_services...")

    vcap_services = dict()

    if database_endpoint:
        if 'postgres' in database_endpoint:
            vcap_services['PostgreSQL'] = [{'credentials': { 'uri': database_endpoint } }]
        if 'mysql' in database_endpoint:
            vcap_services['p.mysql'] = [{'credentials': { 'uri': database_endpoint } }]
        if 'sqlserver' in database_endpoint:
            # Without DATABASE_URL env var, cf-mendix-buildpack supports sqlserver as azure-sqldb
            vcap_services['azure-sqldb'] = [{'credentials': { 'jdbcUrl': database_endpoint } }]

    if not vcap_services:
        logging.error("Not supported database endpoint {0}"
            .format(database_endpoint))
        sys.exit(1)

    return vcap_services

def export_vcap_variables():
    logging.debug("Executing build_vcap_variables...")

    vcap_services = create_vcap_services()
    logging.debug("Set environment variable VCAP_SERVICES: \n {0}"
        .format(vcap_services))
    os.environ['VCAP_SERVICES'] = vcap_services

    vcap_application = create_vcap_application()
    logging.debug("Set environment variable VCAP_APPLICATION: \n {0}"
        .format(vcap_application))
    os.environ['VCAP_APPLICATION'] = vcap_application

def create_vcap_services():
    logging.debug("Executing create_vcap_services...")
    database_endpoint = os.environ['DATABASE_ENDPOINT']
    if database_endpoint is None:
        logging.error(
            'DATABASE_ENDPOINT environment variable not found.'
            'The database uri is required in order to startup the container.'
        )
        sys.exit(1)

    vcap_services = update_vcap_services(database_endpoint)

    vcap_services_str = json.dumps(vcap_services, sort_keys=True, indent=4,
        separators=(',', ': '))
    return vcap_services_str

def create_vcap_application():
    logging.debug("Executing create_vcap_application...")
    vcap_application_data = open("vcap_application.json").read()
    return vcap_application_data
    
def export_k8s_instance():
    logging.debug("Checking Kubernetes environment...")
    kubernetes_host = os.environ.get('KUBERNETES_SERVICE_HOST')
    if kubernetes_host is not None:
        hostname = os.environ.get('HOSTNAME')
        instance_match = re.search('(?<=-)[0-9]+$', hostname)
        if instance_match is not None:
            instance_number = instance_match.group(0)
            logging.info("Setting CF_INSTANCE_INDEX to {0} based on hostname {1}"
                .format(instance_number, hostname))
            os.environ['CF_INSTANCE_INDEX'] = instance_number
            
def export_encoded_cacertificates():
    logging.debug("Checking for encoded CA certificates...")
    certificate_authorities_base64 = os.environ.get('CERTIFICATE_AUTHORITIES_BASE64')
    if certificate_authorities_base64 is not None:
        logging.info("Decoding encoded CA certificates into CERTIFICATE_AUTHORITIES environment variable")
        certificate_authorities = base64.b64decode(certificate_authorities_base64)
        os.environ['CERTIFICATE_AUTHORITIES'] = str(certificate_authorities,'utf-8')
            
def call_builpack_startup():
    logging.debug("Executing call_builpack_startup...")
    subprocess.call(["python3", STARTUP_PATH])

def get_welcome_header():
    welcome_ascii_header = '''
                              ##        .
                         ## ## ##       ==
                       ## ## ## ##      ===
                   /""""""""""""""""\___/ ===
              ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
                   \______ o          __/
                     \    \        __/
                      \____\______/

     __  __        _  _     _____             _
    |  \/  |      | || |   |  __ \           | |
    | \  / |_  __ | || |_  | |  | | ___   ___| | _____ _ __
    | |\/| \ \/ / |__   _| | |  | |/ _ \ / __| |/ / _ \ '__|
    | |  | |>  <     | |   | |__| | (_) | (__|   <  __/ |
    |_|  |_/_/\_\    |_|   |_____/ \___/ \___|_|\_\___|_|

                                digitalecosystems@mendix.com


    '''
    return welcome_ascii_header


if __name__ == '__main__':
    logging.info(get_welcome_header())
    export_vcap_variables()
    export_k8s_instance()
    
    export_encoded_cacertificates()
    call_builpack_startup()
    sys.exit(0)
